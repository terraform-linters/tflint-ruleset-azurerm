// This file generated by `tools/apispec-rule-gen/main.go`. DO NOT EDIT

package apispec

import (

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
	"github.com/terraform-linters/tflint-ruleset-azurerm/project"
)

// AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule checks the pattern is valid
type AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule struct {
	resourceType  string
	attributeName string
	min           int
}

// NewAzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule returns new rule with default attributes
func NewAzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule() *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule {
	return &AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule{
		resourceType:  "azurerm_data_factory_integration_runtime_managed",
		attributeName: "max_parallel_executions_per_node",
		min:           1,
	}
}

// Name returns the rule name
func (r *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule) Name() string {
	return "azurerm_data_factory_integration_runtime_managed_invalid_max_parallel_executions_per_node"
}

// Enabled returns whether the rule is enabled by default
func (r *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule) Link() string {
	return project.ReferenceLink(r.Name())
}

// Check checks the pattern is valid
func (r *AzurermDataFactoryIntegrationRuntimeManagedInvalidMaxParallelExecutionsPerNodeRule) Check(runner tflint.Runner) error {
	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val int
		err := runner.EvaluateExpr(attribute.Expr, &val, nil)

		return runner.EnsureNoError(err, func() error {
			if val < r.min {
				runner.EmitIssueOnExpr(
					r,
					"max_parallel_executions_per_node must be 1 or higher",
					attribute.Expr,
				)
			}
			return nil
		})
	})
}
