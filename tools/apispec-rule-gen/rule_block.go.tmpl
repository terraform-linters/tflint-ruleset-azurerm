package apispec

import (
{{- if and (or (ne .Pattern "") (ne (len .Enum) 0)) (ne .Sensitive true) }}
	"fmt"
{{- end }}
{{- if ne .Pattern "" }}
	"regexp"
{{- end }}

	"github.com/terraform-linters/tflint-plugin-sdk/hclext"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
	"github.com/terraform-linters/tflint-ruleset-azurerm/project"
)

// {{ .RuleNameCC }}Rule checks the pattern is valid
type {{ .RuleNameCC }}Rule struct {
	tflint.DefaultRule

	resourceType  string
	blockType     string
	attributeName string
{{- if .SetMax }}
	max           int
{{- end }}
{{- if .SetMin }}
	min           int
{{- end }}
{{- if ne .Pattern "" }}
	pattern       *regexp.Regexp
{{- end }}
{{- if ne (len .Enum) 0 }}
	enum          []string
{{- end }}
}

// New{{ .RuleNameCC }}Rule returns new rule with default attributes
func New{{ .RuleNameCC }}Rule() *{{ .RuleNameCC }}Rule {
	return &{{ .RuleNameCC }}Rule{
		resourceType:  "{{ .ResourceType }}",
		blockType:     "{{ .BlockType }}",
		attributeName: "{{ .AttributeName }}",
{{- if .SetMax }}
		max:           {{ .Max }},
{{- end }}
{{- if .SetMin }}
		min:           {{ .Min }},
{{- end }}
{{- if ne .Pattern "" }}
		pattern:       regexp.MustCompile(`{{ .Pattern }}`),
{{- end }}
{{- if ne (len .Enum) 0 }}
		enum: []string{
{{- range $v := .Enum }}
			"{{ $v }}",
{{- end }}
		},
{{- end }}
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}Rule) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}Rule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *{{ .RuleNameCC }}Rule) Severity() tflint.Severity {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *{{ .RuleNameCC }}Rule) Link() string {
	return project.ReferenceLink(r.Name())
}

// Check checks whether ...
func (r *{{ .RuleNameCC }}Rule) Check(runner tflint.Runner) error {
	resources, err := runner.GetResourceContent(r.resourceType, &hclext.BodySchema{
		Blocks: []hclext.BlockSchema{
			{
				Type: r.blockType,
				Body: &hclext.BodySchema{
					Attributes: []hclext.AttributeSchema{
						{Name: r.attributeName},
					},
				},
			},
		},
	}, nil)
	if err != nil {
		return err
	}

	for _, resource := range resources.Blocks {
		for _, inner := range resource.Body.Blocks {
			attribute, exists := inner.Body.Attributes[r.attributeName]
			if !exists {
				continue
			}

{{- if (or (.SetMax) (.SetMin)) }}
			err := runner.EvaluateExpr(attribute.Expr, func (val int) error {
{{- else }}
			err := runner.EvaluateExpr(attribute.Expr, func (val string) error {
{{- end }}
{{- if .SetMax }}
				if val > r.max {
					runner.EmitIssue(
						r,
						"{{ .AttributeName }} must be {{ .Max }} or less",
						attribute.Expr.Range(),
					)
				}
{{- end }}

{{- if .SetMin }}
				if val < r.min {
					runner.EmitIssue(
						r,
						"{{ .AttributeName }} must be {{ .Min }} or higher",
						attribute.Expr.Range(),
					)
				}
{{- end }}

{{- if ne .Pattern "" }}
				if !r.pattern.MatchString(val) {
					runner.EmitIssue(
						r,
{{- if .Sensitive }}
						`{{ .AttributeName }} does not match valid pattern {{ .Pattern }}`,
{{- else }}
						fmt.Sprintf(`"%s" does not match valid pattern %s`, truncateLongMessage(val), `{{ .Pattern }}`),
{{- end }}
						attribute.Expr.Range(),
					)
				}
{{- end }}

{{- if ne (len .Enum) 0 }}
				found := false
				for _, item := range r.enum {
					if item == val {
						found = true
					}
				}
				if !found {
					runner.EmitIssue(
						r,
{{- if .Sensitive }}
						`{{ .AttributeName }} is an invalid value`,
{{- else }}
						fmt.Sprintf(`"%s" is an invalid value as {{ .AttributeName }}`, truncateLongMessage(val)),
{{- end }}
						attribute.Expr.Range(),
					)
				}
{{- end }}
				return nil
			}, nil)
			if err != nil {
				return err
			}
		}
	}

	return nil
}
